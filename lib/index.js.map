{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap a9f5a9772af8adeee8da","webpack:///./src/RetryFetcher.js","webpack:///./src/GraphQLError.js","webpack:///./src/Subscriber.js","webpack:///./src/ReconnectingSubscriber.js","webpack:///./src/Fetcher.js","webpack:///./src/index.js"],"names":["maxRetries","setTimeout","fetchProxy","retryCount","fetch","response","resolve","retryOn","retry","error","reject","constructor","Error","GQL","CONNECTION_INIT","CONNECTION_ACK","CONNECTION_ERROR","CONNECTION_KEEP_ALIVE","START","STOP","CONNECTION_TERMINATE","DATA","ERROR","COMPLETE","event","type","payload","callbacks","Array","callback","subscribe","id","shutdown","onKeepAlive","onMessage","data","JSON","reconnectableSubscribe","unsubscribeProxy","reschedule","resubscribe","method","operationName","headers","body","delay"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"jetblack-graphql-client\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"jetblack-graphql-client\"] = factory();\n\telse\n\t\troot[\"jetblack-graphql-client\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap a9f5a9772af8adeee8da","function retryFetch (url, options, delay = 1000, maxRetries = 0, retryOn = [503]) {\n  return new Promise((resolve, reject) => {\n    const fetchProxy = retryCount => {\n      fetch(url, options)\n        .then((response) => {\n          if (response.status < 400) {\n            resolve(response)\n          } else if (retryOn.includes(response.status) && (maxRetries === 0 || retryCount < maxRetries)) {\n            retry(retryCount)\n          } else {\n            resolve(response)\n          }\n        })\n        .catch(error => {\n          if (maxRetries > 0 && retryCount < maxRetries) {\n            retry(retryCount)\n          } else {\n            reject(error)\n          }\n        })\n    }\n\n    function retry (retryCount) {\n      setTimeout(() => fetchProxy(++retryCount), delay)\n    }\n\n    fetchProxy(0)\n  })\n}\n\nexport default class RetryFetcher {\n  constructor (url, headers = {}, method = null, delay = 1000, maxRetries = 0, retryOn = [503]) {\n    this.url = url\n    this.headers = headers\n    this.method = method\n    this.delay = delay\n    this.maxRetries = maxRetries\n    this.retryOn = retryOn\n  }\n\n  fetch (query, variables = {}, operationName = null, headers = {}, method = null, delay = null, maxRetries = null, retryOn = null) {\n    return retryFetch(this.url, {\n      method: method || this.method || 'post',\n      headers: {\n        ...this.headers,\n        ...headers,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        query,\n        variables,\n        operationName\n      })\n    },\n    delay || this.delay,\n    maxRetries || this.maxRetries,\n    retryOn || this.retryOn)\n      .then(response => response.json())\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/RetryFetcher.js","export default class GraphQLError extends Error {\n  constructor (details, ...params) {\n    super(...params)\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, GraphQLError)\n    }\n\n    this.details = details\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/GraphQLError.js","import GraphQLError from './GraphQLError'\n\nconst GQL = {\n  CONNECTION_INIT: 'connection_init',\n  CONNECTION_ACK: 'connection_ack',\n  CONNECTION_ERROR: 'connection_error',\n  CONNECTION_KEEP_ALIVE: 'ka',\n  START: 'start',\n  STOP: 'stop',\n  CONNECTION_TERMINATE: 'connection_terminate',\n  DATA: 'data',\n  ERROR: 'error',\n  COMPLETE: 'complete'\n}\n\nexport default class Subscriber {\n  constructor (url, options, callback) {\n    this.callback = callback\n\n    this.nextId = 1\n    this.subscriptions = new Map()\n    this.webSocket = new WebSocket(url, 'graphql-ws')\n\n    this.webSocket.onopen = event => {\n      // Initiate the connection\n      this.webSocket.send(JSON.stringify({\n        type: GQL.CONNECTION_INIT,\n        payload: options\n      }))\n    }\n\n    this.webSocket.onclose = event => {\n      const error = new GraphQLError(event)\n      // Notify the subscriber.\n      this.callback(error)\n      // Notify the subscriptions.\n      const callbacks = Array.from(this.subscriptions.values())\n      this.subscriptions.clear()\n      for (const callback of callbacks) {\n        callback(error, undefined)\n      }\n    }\n\n    this.webSocket.onmessage = this.onMessage.bind(this)\n  }\n\n  subscribe (query, variables, operationName, callback) {\n    const id = (this.nextId++).toString()\n    this.subscriptions.set(id, callback)\n\n    // Start the subscription.\n    this.webSocket.send(JSON.stringify({\n      type: GQL.START,\n      id,\n      payload: { query, variables, operationName }\n    }))\n\n    // Return the unsubscriber.\n    return () => {\n      this.subscriptions.delete(id)\n\n      // Stop the subscription.\n      this.webSocket.send(JSON.stringify({\n        type: GQL.STOP,\n        id\n      }))\n    }\n  }\n\n  shutdown () {\n    this.webSocket.send(JSON.stringify({\n      type: GQL.CONNECTION_TERMINATE\n    }))\n    this.webSocket.close()\n  }\n\n  onKeepAlive () {\n    // Stub for inheriting classes to override.\n  }\n\n  onMessage (event) {\n    const data = JSON.parse(event.data)\n\n    switch (data.type) {\n      case GQL.CONNECTION_ACK: {\n        // This is the successful response to GQL.CONNECTION_INIT\n        if (this.callback) {\n          this.callback(undefined, this.subscribe.bind(this))\n        }\n        break\n      }\n      case GQL.CONNECTION_ERROR: {\n        // This may occur:\n        // 1. In response to GQL.CONNECTION_INIT\n        // 2. In case of parsing errors in the client which will not disconnect.\n        // The payload contains the error.\n        if (this.callback) {\n          this.callback(new GraphQLError(data.payload), this)\n        }\n        break\n      }\n      case GQL.CONNECTION_KEEP_ALIVE: {\n        // This will occur:\n        // 1. After GQL.CONNECTION_ACK\n        // 2. Periodically to keep the connection alive.\n        this.onKeepAlive()\n        break\n      }\n      case GQL.DATA: {\n        // These messages are sent after GQL.START to transfer the results of the GraphQL subscription.\n        const callback = this.subscriptions.get(data.id)\n        if (callback) {\n          const error = data.payload.errors ? new GraphQLError(data.payload.errors) : undefined\n          callback(error, data.payload.data)\n        }\n        break\n      }\n      case GQL.COMPLETE: {\n        // This is sent when an operation is done and no more data will be sent.\n        const callback = this.subscriptions.get(data.id)\n        if (callback) {\n          this.subscriptions.delete(data.id)\n          callback(new GraphQLError('complete'), undefined)\n        }\n        break\n      }\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Subscriber.js","import Subscriber from './Subscriber'\n\nexport default class ReconnectingSubscriber {\n  constructor (url, options, callback, delay = 1000, maxRetries = 0) {\n    this.url = url\n    this.options = options\n    this.callback = callback\n    this.timeodelayut = delay\n    this.maxRetries = maxRetries\n    this.retryCount = 0\n    this.subscriber = new Subscriber(\n      this.url,\n      this.options,\n      (error, subscribe) => {\n        this.callback(error, (query, variables, operationName, callback) => {\n          return this.reconnectableSubscribe(subscribe, query, variables, operationName, callback, {})\n        })\n      })\n  }\n\n  reconnectableSubscribe (subscribe, query, variables, operationName, callback, unsubscribeProxy) {\n    unsubscribeProxy.unsubscribe = subscribe(query, variables, operationName, (error, data) => {\n      if (error && error.details instanceof CloseEvent) {\n        this.reschedule(query, variables, operationName, callback, unsubscribeProxy)\n      } else {\n        this.retryCount = 0\n        callback(error, data)\n      }\n    })\n    return () => unsubscribeProxy.unsubscribe()\n  }\n\n  reschedule (query, variables, operationName, callback, unsubscribeProxy) {\n    setTimeout(() => {\n      this.resubscribe(query, variables, operationName, callback, unsubscribeProxy)\n    }, this.delay)\n  }\n\n  resubscribe (query, variables, operationName, callback, unsubscribeProxy) {\n    if (this.maxRetries > 0 && ++this.retryCount > this.maxRetries) {\n      this.callback(new Error('Max retries exceeded'), undefined)\n      return\n    }\n\n    this.subscriber = new Subscriber(\n      this.url,\n      this.options,\n      (error, subscribe) => {\n        if (error && error.details instanceof CloseEvent) {\n          this.reschedule(query, variables, operationName, callback, unsubscribeProxy)\n        } else {\n          return this.reconnectableSubscribe(subscribe, query, variables, operationName, callback, unsubscribeProxy)\n        }\n      })\n  }\n\n  shutdown () {\n    this.subscriber.shutdown()\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/ReconnectingSubscriber.js","export default class Fetcher {\n  constructor (url, headers = {}, method = 'post') {\n    this.url = url\n    this.headers = headers\n    this.method = method\n  }\n\n  fetch (query, variables = {}, operationName = null, headers = {}, method = null) {\n    return fetch(this.url, {\n      method: method || this.method,\n      headers: {\n        ...this.headers,\n        ...headers,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        query,\n        variables,\n        operationName\n      })\n    })\n      .then(response => response.json())\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Fetcher.js","export { default as GraphQLError } from './GraphQLError'\nexport { default as Subscriber } from './Subscriber'\nexport { default as ReconnectingSubscriber } from './ReconnectingSubscriber'\nexport { default as Fetcher } from './Fetcher'\nexport { default as RetryFetcher } from './RetryFetcher'\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js"],"sourceRoot":""}